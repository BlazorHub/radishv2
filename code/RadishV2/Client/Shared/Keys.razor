@inherits NotificationComponent

@using RadishV2.Client.Dialogs
@using StackExchange.Redis;

@inject SettingService rs
@inject KeyService ks
@inject HttpClient Http
@inject Radzen.DialogService dialogService

<RadzenCard Style="margin-top: 5px; border-style: ridge; margin-bottom: 5px; min-height:550px;">
    <div class="container">
        <div class="row pl-3 pb-1 pt-2">
            <div class="col-sm-12">
                <h3>Keys</h3>
            </div>
        </div>
        <div class="row pl-3 pb-1 align-top">
            <div class="col-sm-7">
                <RadzenDropDown AllowClear="false" TValue="RedisType"
                                Data="@(dataTypes.Select(c => new { KeyTypeName = c.KeyTypeName, RedisType = c.RedisType }).Distinct())"
                                TextProperty="KeyTypeName" ValueProperty="RedisType" Change="@(args => KeyTypeChange(args))" Disabled="@isDisabled">
                </RadzenDropDown>
            </div>
            <div class="col-sm-5">
                <RadzenButton ButtonStyle="ButtonStyle.Primary" Click="@((args) => AddNewValue(args))" Disabled="@(redisType == RedisType.None)">Add</RadzenButton>
            </div>
        </div>
        <div class="row pl-3 pb-1">
            <div class="col-sm-12">
                <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value=@value Data=@rs.KeyList TextProperty="KeyName" ValueProperty="KeyName"
                               Change=@(args => OnChange(args)) Style="height:400px; width:100%;">
                    <Template>
                        <div class="text-nowrap">
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Click="@((args) => DeleteKey((context as KeyListItem)))" Icon="delete"></RadzenButton>
                            @((context as KeyListItem).KeyName)
                        </div>
                    </Template>
                </RadzenListBox>
            </div>
        </div>
    </div>
</RadzenCard>

@code {

    string value = "";
    List<KeyType> dataTypes = new List<KeyType>();
    RedisType redisType = RedisType.None;
    bool isDisabled = true;

    protected override Task OnInitializedAsync()
    {
        dataTypes.Add(new KeyType("String Key", RedisType.String));
        dataTypes.Add(new KeyType("Hash Key", RedisType.Hash));
        dataTypes.Add(new KeyType("List Key", RedisType.List));
        dataTypes.Add(new KeyType("Set Key", RedisType.Set));
        dataTypes.Add(new KeyType("Sorted Set Key", RedisType.SortedSet));

        dialogService.OnOpen += Open;
        dialogService.OnClose += Close;

        rs.Notify += OnNotify;

        StateHasChanged();

        return Task.CompletedTask;
    }

    public async Task OnNotify(bool key)
    {
        await InvokeAsync(() =>
        {
            isDisabled = false;

            StateHasChanged();
        });
    }

    public void Dispose()
    {
        rs.Notify -= OnNotify;
    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        StateHasChanged();
    }

    void Close(dynamic result)
    {
        StateHasChanged();
    }

    void KeyTypeChange(object value)
    {
        redisType = (RedisType)value;

        StateHasChanged();
    }

    async Task DeleteKey(KeyListItem keyListItem)
    {
        ApplicationResponse applicationResponse = new ApplicationResponse(false, string.Empty);

        KeyPayload keyPayload = new KeyPayload();
        keyPayload.RedisSetting = rs.RedisSetting;
        keyPayload.KeyListItem = keyListItem;
        HttpResponseMessage response = await Http.PostAsJsonAsync<KeyPayload>("Redis/keys/delete", keyPayload);
        applicationResponse = await response.Content.ReadFromJsonAsync<ApplicationResponse>();

        if (applicationResponse.IsSuccess)
        {
            rs.KeyList.Remove(keyListItem);
        }
        else
        {
            ShowErrorNotification(applicationResponse.Message);
        }

        StateHasChanged();
    }

    async void OnChange(object value)
    {
        KeyListItem keyListItem = rs.KeyList.FirstOrDefault(k => k.KeyName == Convert.ToString(value));
        await ks.EditKey(keyListItem);
    }

    async Task AddNewValue(MouseEventArgs e)
    {
        ApplicationResponse applicationResponse = new ApplicationResponse(false, string.Empty);

        HttpResponseMessage response = null;

        KeyPayload keyPayload = new KeyPayload();
        keyPayload.RedisSetting = rs.RedisSetting;

        DialogOptions options = new DialogOptions();
        options.ShowClose = true;

        dynamic value;

        switch (redisType)
        {
            case RedisType.String:
                value = await dialogService.OpenAsync<AddStringValue>("Add String Key", null, options);
                if (value is KeyListItem)
                {
                    keyPayload.KeyListItem = value;
                    response = await Http.PostAsJsonAsync<KeyPayload>("Redis/keys/add/string", keyPayload);
                }
                break;
            case RedisType.Hash:
                value = await dialogService.OpenAsync<AddHashValue>("Add Hash Key", null, options);
                if (value is KeyListItem)
                {
                    keyPayload.KeyListItem = value;
                    response = await Http.PostAsJsonAsync<KeyPayload>("Redis/keys/add/hash", keyPayload);
                }
                break;
            case RedisType.List:
                value = await dialogService.OpenAsync<AddListValue>("Add List Key", null, options);
                if (value is KeyListItem)
                {
                    keyPayload.KeyListItem = value;
                    response = await Http.PostAsJsonAsync<KeyPayload>("Redis/keys/add/list", keyPayload);
                }
                break;
            case RedisType.Set:
                value = await dialogService.OpenAsync<AddSetValue>("Add Set Key", null, options);
                if (value is KeyListItem)
                {
                    keyPayload.KeyListItem = value;
                    response = await Http.PostAsJsonAsync<KeyPayload>("Redis/keys/add/set", keyPayload);
                }
                break;
            case RedisType.SortedSet:
                value = await dialogService.OpenAsync<AddSortedSetValue>("Add Sorted Set Key", null, options);
                if (value is KeyListItem)
                {
                    keyPayload.KeyListItem = value;
                    response = await Http.PostAsJsonAsync<KeyPayload>("Redis/keys/add/sortedset", keyPayload);
                }
                break;
            default:
                break;
        }

        if (response != null && keyPayload.KeyListItem.KeyValues.Count > 0)
        {
            applicationResponse = await response.Content.ReadFromJsonAsync<ApplicationResponse>();
            if (applicationResponse.IsSuccess)
            {
                rs.KeyList.Add(keyPayload.KeyListItem);
                ShowNotification(applicationResponse.Message);
            }
            else
            {
                ShowErrorNotification(applicationResponse.Message);
            }
        }

        StateHasChanged();
    }

}