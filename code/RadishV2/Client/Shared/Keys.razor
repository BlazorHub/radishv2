@inherits NotificationComponent

@using RadishV2.Client.Dialogs
@using StackExchange.Redis;

@inject SettingService rs
@inject KeyService ks
@inject HttpClient Http
@inject Radzen.DialogService dialogService
@inject LoadingService loadingService

<RadzenCard Style="margin-top: 5px; border-style: ridge; margin-bottom: 5px; min-height:550px;">
    <div class="container">
        <div class="row pl-3 pb-1 pt-2">
            <div class="col-sm-12">
                <h3>Keys - @(keyCount)</h3>
            </div>
        </div>
        <div class="row pl-3 pb-1 pt-2">
            <div class="col-sm-12">
                <RadzenButton ButtonStyle="ButtonStyle.Primary" Click="@((args) => GetKeys(args))" Disabled="@(rs.KeyList.Count <= 0)" Style="width: 100%">Load All Keys</RadzenButton>
            </div>
        </div>
        <div class="row pl-3 pb-1 pt-2">
            <div class="col-sm-12">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Click="@((args) => DeleteAllKeys())" Disabled="@(rs.KeyList.Count <= 0)" Style="width: 100%">Purge All Keys</RadzenButton>
            </div>
        </div>
        <div class="row pl-3 pb-1 align-top">
            <div class="col-sm-7">
                <RadzenDropDown AllowClear="false" TValue="RedisType"
                                Data="@(dataTypes.Select(c => new { KeyTypeName = c.KeyTypeName, RedisType = c.RedisType }).Distinct())"
                                TextProperty="KeyTypeName" ValueProperty="RedisType" Change="@(args => KeyTypeChange(args))">
                </RadzenDropDown>
            </div>
            <div class="col-sm-5">
                <RadzenButton ButtonStyle="ButtonStyle.Primary" Click="@((args) => AddNewValue(args))" Disabled="@(redisType == RedisType.None)">Add</RadzenButton>
            </div>
        </div>
        <div class="row pl-3 pb-1">
            <div class="col-sm-12">
                <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value=@value Data=@displayedKeys TextProperty="KeyName" ValueProperty="KeyName"
                               Change=@(args => OnChange(args)) Style="min-height:400px; max-height:575px; width:100%;" Name="KeyListBox">
                    <Template>
                        <div class="text-nowrap">
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Click="@((args) => DeleteKey((context as KeyListItem)))" Icon="delete"></RadzenButton>
                            @((context as KeyListItem).KeyName)
                        </div>
                    </Template>
                </RadzenListBox>
            </div>
        </div>
        <div class="row pl-3 pb-1">
            <div class="col-sm-4">
                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Click="@((args) => PrevKeys(args))" Style="width: 100%" Icon="navigate_before" Disabled="rs.RedisSetting.KeyPage <= 0"></RadzenButton>
            </div>
            <div class="col-sm-4">
                <RadzenNumeric TValue="int" Min="1" Max="@lastPage" @bind-Value=@currentPage Step="1" Change=@(args => GoPage(args)) />
            </div>
            <div class="col-sm-4">
                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Click="@((args) => NextKeys(args))" Style="width: 100%" Icon="navigate_next" Disabled="currentPosition >= rs.KeyList.Count"></RadzenButton>
            </div>
        </div>
    </div>
</RadzenCard>

@code {

    string value = "";
    List<KeyType> dataTypes = new List<KeyType>();
    List<KeyListItem> displayedKeys = new List<KeyListItem>();
    RedisType redisType = RedisType.None;
    int keyCount = 0;
    int currentPosition = 0;
    int currentPage = 1;
    int lastPage = 1;

    protected override Task OnInitializedAsync()
    {
        dataTypes.Add(new KeyType("String Key", RedisType.String));
        dataTypes.Add(new KeyType("Hash Key", RedisType.Hash));
        dataTypes.Add(new KeyType("List Key", RedisType.List));
        dataTypes.Add(new KeyType("Set Key", RedisType.Set));
        dataTypes.Add(new KeyType("Sorted Set Key", RedisType.SortedSet));

        dialogService.OnOpen += Open;
        dialogService.OnClose += Close;

        rs.Notify += OnNotify;

        LoadKeyCount();

        CalculateLastPage();

        rs.RedisSetting.KeyPage = 0;
        GoPage(1);

        StateHasChanged();

        return Task.CompletedTask;
    }

    public void LoadKeyCount()
    {
        // Getting the total key count.
        keyCount = rs.KeyList.Count;

        StateHasChanged();
    }

    public void PrevKeys(MouseEventArgs e)
    {
        if (rs.RedisSetting.KeyPage > 0)
        {
            rs.RedisSetting.KeyPage--;
            currentPage = rs.RedisSetting.KeyPage + 1;
            currentPosition = (rs.RedisSetting.KeyPage * 500 + 500);

            int rangeEnd = (rs.RedisSetting.KeyPage * 500 + 500) > rs.KeyList.Count ? rs.KeyList.Count - (rs.RedisSetting.KeyPage * 500) : 500;

            displayedKeys = rs.KeyList.GetRange(rs.RedisSetting.KeyPage * 500, 500).ToList();

            StateHasChanged();
        }
    }

    public void NextKeys(MouseEventArgs e)
    {
        int endIndex = rs.KeyList.Count - 1;

        if (currentPosition <= endIndex)
        {
            rs.RedisSetting.KeyPage++;
            currentPage = rs.RedisSetting.KeyPage + 1;
            currentPosition = (rs.RedisSetting.KeyPage * 500 + 500);

            int rangeEnd = (rs.RedisSetting.KeyPage * 500 + 500) > endIndex ? endIndex - (rs.RedisSetting.KeyPage * 500) : 500;

            displayedKeys = rs.KeyList.GetRange(rs.RedisSetting.KeyPage * 500, rangeEnd).ToList();

            StateHasChanged();
        }
    }

    public void GoPage(int arg)
    {
        if (keyCount > 0)
        {
            int endIndex = rs.KeyList.Count - 1;

            rs.RedisSetting.KeyPage = currentPage - 1;
            currentPosition = (rs.RedisSetting.KeyPage * 500 + 500);

            int rangeEnd = (rs.RedisSetting.KeyPage * 500 + 500) > endIndex ? endIndex - (rs.RedisSetting.KeyPage * 500) : 500;

            displayedKeys = rs.KeyList.GetRange(rs.RedisSetting.KeyPage * 500, rangeEnd).ToList();

            StateHasChanged();
        }
    }

    public async Task OnNotify(bool key)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        rs.Notify -= OnNotify;
    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        StateHasChanged();
    }

    void Close(dynamic result)
    {
        StateHasChanged();
    }

    void KeyTypeChange(object value)
    {
        redisType = (RedisType)value;

        StateHasChanged();
    }

    async Task DeleteKey(KeyListItem keyListItem)
    {
        await loadingService.StartLoading();
        ApplicationResponse applicationResponse = new ApplicationResponse(false, string.Empty);

        KeyPayload keyPayload = new KeyPayload();
        keyPayload.RedisSetting = rs.RedisSetting;
        keyPayload.KeyListItem = keyListItem;
        HttpResponseMessage response = await Http.PostAsJsonAsync<KeyPayload>("Redis/keys/delete", keyPayload);
        applicationResponse = await response.Content.ReadFromJsonAsync<ApplicationResponse>();

        if (applicationResponse.IsSuccess)
        {
            var rskIndex = rs.KeyList.FindIndex(x => x.KeyName == keyListItem.KeyName);
            rs.KeyList.RemoveAt(rskIndex);

            var dispIndex = displayedKeys.FindIndex(x => x.KeyName == keyListItem.KeyName);
            displayedKeys.RemoveAt(dispIndex);

            LoadKeyCount();

            CalculateLastPage();

            IsGoToLastPage();
        }
        else
        {
            ShowErrorNotification(applicationResponse.Message);
        }

        await loadingService.StopLoading();
        StateHasChanged();
    }

    async Task GetKeys(MouseEventArgs e)
    {
        await loadingService.StartLoading();
        RedisSetting setting = rs.RedisSetting;
        HttpResponseMessage response = await Http.PostAsJsonAsync<RedisSetting>("Redis/keys", setting);
        rs.KeyList.Clear();
        rs.KeyList.AddRange(await response.Content.ReadFromJsonAsync<KeyListItem[]>());
        rs.RedisSetting.KeyPage = 0;

        await rs.Update(true);

        LoadKeyCount();

        CalculateLastPage();

        rs.RedisSetting.KeyPage = 0;
        GoPage(1);

        ShowNotification("Loaded Keys");

        await loadingService.StopLoading();

        StateHasChanged();
    }

    async Task DeleteAllKeys()
    {
        bool? result = await dialogService.Confirm("Are you sure? This cannot be undone.", "Delete All", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        if (result != null)
        {
            if (result == true)
            {
                KeyPayload keyPayload = new KeyPayload();
                keyPayload.RedisSetting = rs.RedisSetting;

                HttpResponseMessage response = await Http.PostAsJsonAsync<KeyPayload>("Redis/keys/delete/all", keyPayload);
                var applicationResponse = await response.Content.ReadFromJsonAsync<ApplicationResponse>();
                rs.KeyList.Clear();
                displayedKeys.Clear();
                LoadKeyCount();

                CalculateLastPage();

                IsGoToLastPage();
            }
        }
    }

    async void OnChange(object value)
    {
        KeyListItem keyListItem = rs.KeyList.FirstOrDefault(k => k.KeyName == Convert.ToString(value));
        await ks.EditKey(keyListItem);
    }

    async Task AddNewValue(MouseEventArgs e)
    {
        ApplicationResponse applicationResponse = new ApplicationResponse(false, string.Empty);

        HttpResponseMessage response = null;

        KeyPayload keyPayload = new KeyPayload();
        keyPayload.RedisSetting = rs.RedisSetting;

        DialogOptions options = new DialogOptions();
        options.ShowClose = true;

        dynamic value;

        switch (redisType)
        {
            case RedisType.String:
                value = await dialogService.OpenAsync<AddStringValue>("Add String Key", null, options);
                if (value is KeyListItem)
                {
                    await loadingService.StartLoading();
                    keyPayload.KeyListItem = value;
                    response = await Http.PostAsJsonAsync<KeyPayload>("Redis/keys/add/string", keyPayload);
                }
                break;
            case RedisType.Hash:
                value = await dialogService.OpenAsync<AddHashValue>("Add Hash Key", null, options);
                if (value is KeyListItem)
                {
                    await loadingService.StartLoading();
                    keyPayload.KeyListItem = value;
                    response = await Http.PostAsJsonAsync<KeyPayload>("Redis/keys/add/hash", keyPayload);
                }
                break;
            case RedisType.List:
                value = await dialogService.OpenAsync<AddListValue>("Add List Key", null, options);
                if (value is KeyListItem)
                {
                    await loadingService.StartLoading();
                    keyPayload.KeyListItem = value;
                    response = await Http.PostAsJsonAsync<KeyPayload>("Redis/keys/add/list", keyPayload);
                }
                break;
            case RedisType.Set:
                value = await dialogService.OpenAsync<AddSetValue>("Add Set Key", null, options);
                if (value is KeyListItem)
                {
                    await loadingService.StartLoading();
                    keyPayload.KeyListItem = value;
                    response = await Http.PostAsJsonAsync<KeyPayload>("Redis/keys/add/set", keyPayload);
                }
                break;
            case RedisType.SortedSet:
                value = await dialogService.OpenAsync<AddSortedSetValue>("Add Sorted Set Key", null, options);
                if (value is KeyListItem)
                {
                    await loadingService.StartLoading();
                    keyPayload.KeyListItem = value;
                    response = await Http.PostAsJsonAsync<KeyPayload>("Redis/keys/add/sortedset", keyPayload);
                }
                break;
            default:
                break;
        }

        if (response != null && keyPayload.KeyListItem.KeyValues.Count > 0)
        {
            applicationResponse = await response.Content.ReadFromJsonAsync<ApplicationResponse>();
            if (applicationResponse.IsSuccess)
            {
                rs.KeyList.Add(keyPayload.KeyListItem);
                displayedKeys.Add(keyPayload.KeyListItem);
                GoPage(lastPage);
                LoadKeyCount();

                CalculateLastPage();

                ShowNotification(applicationResponse.Message);
            }
            else
            {
                ShowErrorNotification(applicationResponse.Message);
            }
        }

        await loadingService.StopLoading();
        StateHasChanged();
    }

    void CalculateLastPage()
    {
        if (keyCount > 0)
        {
            if ((Convert.ToInt32(keyCount) % 500) != 0)
            {
                lastPage = (Convert.ToInt32(keyCount) / 500) + 1;
            }
            else
            {
                lastPage = (Convert.ToInt32(keyCount) / 500);
            }
        }
        else
        {
            lastPage = 1;
        }
    }

    void IsGoToLastPage()
    {
        if (currentPage > lastPage)
        {
            GoPage(lastPage);
        }
    }

}