@inherits NotificationComponent

@using RadishV2.Client.Dialogs
@using StackExchange.Redis;

@inject SettingService rs
@inject KeyService ks
@inject HttpClient Http
@inject Radzen.DialogService dialogService
@inject LoadingService loadingService

<RadzenCard Style="    margin-top: 5px;
        border-style: ridge;
        margin-bottom: 5px;
        min-height: 550px;
    ">
    <RadzenTemplateForm TItem="KeyListItem" Data=@newItem Submit=@OnSubmit>
        <div class="container">
            <div class="row pb-1 pt-2">
                <div class="col-sm">
                    <h3>Edit Hash Key</h3>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-4">
                    Key Name
                </div>
                <div class="col-sm-8">
                    <RadzenTextBox Name="KeyName" Placeholder="String Value" @bind-Value="@newItem.KeyName" Style="margin-bottom: 20px; width: 60%;" />
                    <RadzenRequiredValidator Component="KeyName" Text="Key name is required" Popup=true Style="position: absolute" />
                </div>
            </div>
            <div class="row">
                <div class="col-sm-4">
                    Hash Name
                </div>
                <div class="col-sm-8">
                    <RadzenTextBox Placeholder="Hash Name" @bind-Value="@hashName" Style="margin-bottom: 20px; width: 60%;" @oninput=@(args => OnTextChange()) />
                </div>
            </div>
            <div class="row">
                <div class="col-sm-4">
                    Hash Value
                </div>
                <div class="col-sm-8">
                    <RadzenTextBox Placeholder="Hash Value" @bind-Value="@hashValue" Style="margin-bottom: 20px; width: 60%;" @oninput=@(args => OnTextChange()) />
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <RadzenButton Click="@((args) => AddValue())" ButtonStyle="ButtonStyle.Secondary" Text="Add" Style="margin-bottom: 10px; width: 150px" />
                </div>
                <div class="col-sm-6">
                    <RadzenButton Click="@((args) => EditValue())" ButtonStyle="ButtonStyle.Light" Disabled="@(newItem.KeyValues.Count <= 0)" Text="Update" Style="margin-bottom: 10px; width: 150px" />
                </div>
            </div>
            <div class="row">
                <div class="col-sm">
                    <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                   @bind-Value=@value Data=@newItem.KeyValues TextProperty="Name" ValueProperty="Name"
                                   Style="height:200px;width:100%;margin-left:5px;margin-bottom:5px;"
                                   Change=@(args => OnChange(args))>
                        <Template Context="listContext">
                            <div class="text-nowrap">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Click="@((args) => DeleteValue((listContext as KeyValue)))" Icon="delete"></RadzenButton>
                                @((listContext as KeyValue).Name) => @((listContext as KeyValue).Value)
                            </div>
                        </Template>
                    </RadzenListBox>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Save" Style="margin-bottom: 10px; width: 150px" />
                </div>
            </div>
        </div>
    </RadzenTemplateForm>
</RadzenCard>

@code {
    HashValidator validator = new HashValidator();
    KeyListItem newItem = new KeyListItem();
    string value = "";

    int currIdx = 0;
    string hashName = string.Empty;
    string hashValue = string.Empty;

    protected override Task OnInitializedAsync()
    {
        newItem = ks.CurrentKey;

        ks.NotifyEditKey += OnEditKeyNotify;

        StateHasChanged();

        return Task.CompletedTask;
    }

    public async Task OnEditKeyNotify(KeyListItem key)
    {
        await loadingService.StartLoading();
        KeyPayload keyPayload = new KeyPayload();
        keyPayload.RedisSetting = rs.RedisSetting;
        keyPayload.KeyListItem = key;
        HttpResponseMessage response = await Http.PostAsJsonAsync<KeyPayload>("Redis/keys/inflate", keyPayload);
        newItem = await response.Content.ReadFromJsonAsync<KeyListItem>();

        ks.CurrentKey = newItem;

        await loadingService.StopLoading();
        StateHasChanged();
    }

    public void Dispose()
    {
        ks.NotifyEditKey -= OnEditKeyNotify;
    }

    void OnTextChange()
    {
        StateHasChanged();
    }

    void OnChange(object value)
    {
        currIdx = newItem.KeyValues.FindIndex(k => k.Name == Convert.ToString(value));
        KeyValue val = newItem.KeyValues.FirstOrDefault(k => k.Name == Convert.ToString(value));
        this.hashName = val.Name;
        this.hashValue = val.Value;
    }

    void AddValue()
    {
        KeyValue val = new KeyValue(hashName, hashValue);

        ValidationResult result = validator.Validate(val);

        if (result.IsValid)
        {
            newItem.KeyValues.Add(val);
            this.hashName = string.Empty;
            this.hashValue = string.Empty;

            StateHasChanged();
        }
        else
        {
            foreach (ValidationFailure error in result.Errors)
            {
                ShowErrorNotification(error.ErrorMessage);
            }
        }
    }

    void EditValue()
    {
        int index = newItem.KeyValues.FindIndex(k => k.Name == Convert.ToString(value));

        if (index >= 0)
        {
            KeyValue val = new KeyValue(hashName, hashValue);
            ValidationResult result = validator.Validate(val);

            if (result.IsValid)
            {
                newItem.KeyValues[index] = val;
            }
            else
            {
                foreach (ValidationFailure error in result.Errors)
                {
                    ShowErrorNotification(error.ErrorMessage);
                }
            }
        }
        else
        {
            KeyValue val = new KeyValue(hashName, hashValue);
            ValidationResult result = validator.Validate(val);

            if (result.IsValid)
            {
                newItem.KeyValues[currIdx] = val;
            }
            else
            {
                foreach (ValidationFailure error in result.Errors)
                {
                    ShowErrorNotification(error.ErrorMessage);
                }
            }
        }

        StateHasChanged();
    }

    void DeleteValue(KeyValue val)
    {
        newItem.KeyValues.Remove(val);

        StateHasChanged();
    }

    async Task OnSubmit(KeyListItem newItem)
    {
        await loadingService.StartLoading();
        ApplicationResponse applicationResponse = new ApplicationResponse(false, string.Empty);

        HttpResponseMessage response = null;

        KeyPayload keyPayload = new KeyPayload();
        keyPayload.RedisSetting = rs.RedisSetting;
        keyPayload.KeyListItem = newItem;
        response = await Http.PostAsJsonAsync<KeyPayload>("Redis/keys/update/hash", keyPayload);

        applicationResponse = await response.Content.ReadFromJsonAsync<ApplicationResponse>();
        if (applicationResponse.IsSuccess)
        {
            ShowNotification(applicationResponse.Message);
        }
        else
        {
            ShowErrorNotification(applicationResponse.Message);
        }

        await loadingService.StopLoading();
        StateHasChanged();
    }
}